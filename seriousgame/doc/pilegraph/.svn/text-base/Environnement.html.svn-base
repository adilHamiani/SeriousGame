<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_09) on Wed Mar 13 00:08:19 CET 2013 -->
<title>Environnement</title>
<meta name="date" content="2013-03-13">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Environnement";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Environnement.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../pilegraph/DrawEnvironnementBis.html" title="class in pilegraph"><span class="strong">Prev Class</span></a></li>
<li><a href="../pilegraph/GUI.html" title="class in pilegraph"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?pilegraph/Environnement.html" target="_top">Frames</a></li>
<li><a href="Environnement.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">pilegraph</div>
<h2 title="Class Environnement" class="title">Class Environnement</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>pilegraph.Environnement</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="strong">Environnement</span>
extends java.lang.Object</pre>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#cptPoignees">cptPoignees</a></strong></code>
<div class="block">nombre de poignees dans l'environnement courant.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#instances">instances</a></strong></code>
<div class="block">ensemble des variables creees</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../pilegraph/Poignee.html" title="class in pilegraph">Poignee</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#pile">pile</a></strong></code>
<div class="block">ensemble des poignees de l'environnement</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.lang.Class&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#types">types</a></strong></code>
<div class="block">classes dont l'utilisateur pourra creer des instances</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.lang.String&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#typesprimitifs">typesprimitifs</a></strong></code>
<div class="block">types consideres comme etant primitifs</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../pilegraph/Environnement.html#Environnement()">Environnement</a></strong>()</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><strong><a href="../pilegraph/Environnement.html#Environnement(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, int)">Environnement</a></strong>(java.util.ArrayList&lt;<a href="../pilegraph/Poignee.html" title="class in pilegraph">Poignee</a>&gt;&nbsp;pile,
             java.util.ArrayList&lt;java.lang.Class&gt;&nbsp;types,
             java.util.ArrayList&lt;java.lang.String&gt;&nbsp;typesprimitifs,
             java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&nbsp;instances,
             int&nbsp;cptPoignees)</code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#addAttributesToInstances(pilegraph.Variable)">addAttributesToInstances</a></strong>(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</code>
<div class="block">ajoute dans l'environnement tous les attributs de la variable var qui sont non primitifs 
 et non nulls et qui ne sont pas deja presents dans l'environnement, 
 puis appel recursif de addAttributesToInstances sur tout attribut non primitif et non null,
 peu importe qu'il soit deja present ou non dans l'environnement</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.Object</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#callMethodUpon(java.lang.reflect.Method, pilegraph.Variable, java.lang.Object[])">callMethodUpon</a></strong>(java.lang.reflect.Method&nbsp;meth,
              <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;upon,
              java.lang.Object[]&nbsp;methargs)</code>
<div class="block">callMethodUpon appelle la methode meth avec les arguments methargs sur la variable upon.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#changeAttribute(java.lang.String, pilegraph.Variable, pilegraph.Variable)">changeAttribute</a></strong>(java.lang.String&nbsp;attributeName,
               <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;hasAttribute,
               <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;newAttribute)</code>
<div class="block">modifie la valeur de l'attribut attributeName de la variable hasAttribute en lui
 affectant pour valeur la variable newAttribute</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#cloneInstances()">cloneInstances</a></strong>()</code>
<div class="block">renvoie une copie de toutes les variables de l'environnement.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../pilegraph/Poignee.html" title="class in pilegraph">Poignee</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#clonePile()">clonePile</a></strong>()</code>
<div class="block">renvoie une copie de toutes les poignees de l'environnement.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#createVariable(java.lang.reflect.Constructor, java.lang.Object[])">createVariable</a></strong>(java.lang.reflect.Constructor&nbsp;constr,
              java.lang.Object[]&nbsp;cstrargs)</code>
<div class="block">creation d'une variable a partir d'un constructeur et des valeurs
 de ses arguments, puis stockage de la variable creee dans l'environnement</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#equalsPoigneePoignee(java.lang.String, java.lang.String)">equalsPoigneePoignee</a></strong>(java.lang.String&nbsp;namepgnleft,
                    java.lang.String&nbsp;namepgnright)</code>
<div class="block">affecte la poignee ayant pour nom namepgnleft la valeur pointee 
 par la poignee ayant pour nom namepgnright</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#equalsPoigneeVariable(java.lang.String, java.lang.String)">equalsPoigneeVariable</a></strong>(java.lang.String&nbsp;namepgn,
                     java.lang.String&nbsp;namevar)</code>
<div class="block">affecte la poignee ayant pour nom namevar a la variable nommee namevar de l'environnement</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#estAccessible(pilegraph.Variable)">estAccessible</a></strong>(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</code>
<div class="block">renvoie true si et seulement si une variable est accessible,
 que ce soit directement a travers une poignee quand cette poignee pointe vers la variable
 ou a travers les attributs des variables vers lesquelles les poignees pointent</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.reflect.Field[]</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#getAllFields(java.lang.Class)">getAllFields</a></strong>(java.lang.Class&nbsp;type)</code>
<div class="block">renvoie toutes les variables declarees dans la classe type et toutes ses superclasses</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.Class</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#getClasseByName(java.lang.String)">getClasseByName</a></strong>(java.lang.String&nbsp;classname)</code>
<div class="block">recupere de l'environnement la classe ayant pour nom classname</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#getConstructorArguments(java.lang.reflect.Constructor)">getConstructorArguments</a></strong>(java.lang.reflect.Constructor&nbsp;cstr)</code>
<div class="block">renvoie pour chaque argument d'un constructeur toutes les variables de type
 compatible dans l'environnement stockes dans une liste.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#getMethodOrConstructorArguments(java.lang.Class[])">getMethodOrConstructorArguments</a></strong>(java.lang.Class[]&nbsp;typesArguments)</code>
<div class="block">renvoie pour chaque argument d'un constructeur ou d'une methode toutes les variables de type
 compatible dans l'environnement stockes dans une liste.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code><a href="../pilegraph/Poignee.html" title="class in pilegraph">Poignee</a></code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#getPoigneeByName(java.lang.String)">getPoigneeByName</a></strong>(java.lang.String&nbsp;namepgn)</code>
<div class="block">recupere de l'environnement la poignee ayant pour nom namepgn</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a></code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#getVariableByName(java.lang.String)">getVariableByName</a></strong>(java.lang.String&nbsp;namevar)</code>
<div class="block">recupere de l'environnement la variable ayant pour nom namevar</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#hasStaticField(pilegraph.Variable)">hasStaticField</a></strong>(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</code>
<div class="block">verifie recursivement si une variable ainsi que toutes les variables ayant pour valeurs
 les attributs de cette variable possedent au moins un attribut declare en statique</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#isDrawable(java.lang.String)">isDrawable</a></strong>(java.lang.String&nbsp;classname)</code>
<div class="block">renvoie true si et seulement si classname figure parmi les classes
 contenues dans l'attribut types de l'environnement.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#isPrimitif(java.lang.String)">isPrimitif</a></strong>(java.lang.String&nbsp;classname)</code>
<div class="block">renvoie true si et seulement si classname figure parmi les noms de classes
 contenus dans l'attribut typesprimitifs de l'environnement.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#isTypable(java.lang.Class)">isTypable</a></strong>(java.lang.Class&nbsp;type)</code>
<div class="block">renvoie true si et seulement si l'utilisateur peut taper manuellement
 la valeur d'une variable du type fourni en argument.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#linkedAttributes(pilegraph.Variable, boolean)">linkedAttributes</a></strong>(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;culprit,
                boolean&nbsp;start)</code>
<div class="block">supprime les liens entre une variable et tous ses attributs et realise ensuite 
 la meme chose recursivement a chacun de ces attributs qui est de type non primitif.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#main(java.lang.String[])">main</a></strong>(java.lang.String[]&nbsp;args)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#mettrePoigneeNull(java.lang.String)">mettrePoigneeNull</a></strong>(java.lang.String&nbsp;namepgn)</code>
<div class="block">affecte la poignee nommee namepgn a la valeur null</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#ramasseMiettes()">ramasseMiettes</a></strong>()</code>
<div class="block">le ramasse-miette supprime de l'environnement les variables qui sont completement inaccessibles,
 ie aucune poignee ne permet d'y acceder, que ce soit directement ou indirectement
 par le biais des attributs des variables vers lesquelles les poignees pointent.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#refreshRelatedVariables(pilegraph.Variable)">refreshRelatedVariables</a></strong>(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</code>
<div class="block">soit TypeA le type de la variable var.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#removeAttributesFromInstances(pilegraph.Variable, boolean)">removeAttributesFromInstances</a></strong>(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;culprit,
                             boolean&nbsp;start)</code>
<div class="block">renvoie la liste des attributs d'une variable culprit.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#retireVariableMere(java.lang.String, pilegraph.Variable, pilegraph.Variable)">retireVariableMere</a></strong>(java.lang.String&nbsp;nomattribut,
                  <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;varMere,
                  <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;varFille)</code>
<div class="block">retire des attributs variablesMeres et attributsPeres de la variable varFille
 respectivement la variable varMere et la chaine nomattribut</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#setAttributeNull(java.lang.String, java.lang.String)">setAttributeNull</a></strong>(java.lang.String&nbsp;nomVar,
                java.lang.String&nbsp;nomAtt)</code>
<div class="block">mise a null de l'attribut nomAtt de la variable nomVar</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#simpleConstructorName(java.lang.reflect.Constructor)">simpleConstructorName</a></strong>(java.lang.reflect.Constructor&nbsp;constr)</code>
<div class="block">renvoie le nom simple du constructeur constitue de :
 visibilite du constructeur, nom du type cree,
 puis nom simple du type de chaque argument</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#simpleMethodName(java.lang.reflect.Method)">simpleMethodName</a></strong>(java.lang.reflect.Method&nbsp;meth)</code>
<div class="block">renvoie le nom simple de la methode constitue de :
 visibilite de la methode, nom simple du type de retour, nom de la methode,
 puis nom simple du type de chaque argument</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#trueVariableName(pilegraph.Variable)">trueVariableName</a></strong>(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</code>
<div class="block">renvoie le nom d'une variable de l'environnement debutant par le nom
 d'une poignee a laquelle elle est liee soit directement, soit indirectement
 en passant par des attributs d'autres variables, comme par exemple poignee1.attributA.attributB</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a></code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#variableContenantAttribut(java.lang.String, java.lang.String)">variableContenantAttribut</a></strong>(java.lang.String&nbsp;nomVarMere,
                         java.lang.String&nbsp;nomAttPere)</code>
<div class="block">renvoie la variable de l'environnement contenant 
 l'attribut nomAttPere de la variable NomVarMere</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#variablesContenantAttributs(pilegraph.Variable)">variablesContenantAttributs</a></strong>(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</code>
<div class="block">renvoie toutes les variables filles de la variable var,
 ie toutes les variables vers lesquelles les attributs non nulls de var pointent</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;</code></td>
<td class="colLast"><code><strong><a href="../pilegraph/Environnement.html#varsContainField(java.lang.String, java.lang.String)">varsContainField</a></strong>(java.lang.String&nbsp;nomVarMere,
                java.lang.String&nbsp;nomAttPere)</code>
<div class="block">renvoie toutes les variables ayant pour variable mere la variable nommee nomVarMere
 et pour attribut pere correspondant l'attribut nomAttPere.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="pile">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>pile</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../pilegraph/Poignee.html" title="class in pilegraph">Poignee</a>&gt; pile</pre>
<div class="block">ensemble des poignees de l'environnement</div>
</li>
</ul>
<a name="types">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>types</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.lang.Class&gt; types</pre>
<div class="block">classes dont l'utilisateur pourra creer des instances</div>
</li>
</ul>
<a name="typesprimitifs">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>typesprimitifs</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.lang.String&gt; typesprimitifs</pre>
<div class="block">types consideres comme etant primitifs</div>
</li>
</ul>
<a name="instances">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>instances</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt; instances</pre>
<div class="block">ensemble des variables creees</div>
</li>
</ul>
<a name="cptPoignees">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>cptPoignees</h4>
<pre>public&nbsp;int cptPoignees</pre>
<div class="block">nombre de poignees dans l'environnement courant. Cet entier servira a generer
 les noms des variables creees.</div>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="Environnement()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>Environnement</h4>
<pre>public&nbsp;Environnement()</pre>
</li>
</ul>
<a name="Environnement(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, int)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Environnement</h4>
<pre>public&nbsp;Environnement(java.util.ArrayList&lt;<a href="../pilegraph/Poignee.html" title="class in pilegraph">Poignee</a>&gt;&nbsp;pile,
             java.util.ArrayList&lt;java.lang.Class&gt;&nbsp;types,
             java.util.ArrayList&lt;java.lang.String&gt;&nbsp;typesprimitifs,
             java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&nbsp;instances,
             int&nbsp;cptPoignees)</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="createVariable(java.lang.reflect.Constructor, java.lang.Object[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>createVariable</h4>
<pre>public&nbsp;void&nbsp;createVariable(java.lang.reflect.Constructor&nbsp;constr,
                  java.lang.Object[]&nbsp;cstrargs)</pre>
<div class="block">creation d'une variable a partir d'un constructeur et des valeurs
 de ses arguments, puis stockage de la variable creee dans l'environnement</div>
</li>
</ul>
<a name="isDrawable(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isDrawable</h4>
<pre>public&nbsp;boolean&nbsp;isDrawable(java.lang.String&nbsp;classname)</pre>
<div class="block">renvoie true si et seulement si classname figure parmi les classes
 contenues dans l'attribut types de l'environnement. La classe sera alors
 affichee dans le graphe de DrawEnvironnementBis</div>
</li>
</ul>
<a name="isPrimitif(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isPrimitif</h4>
<pre>public&nbsp;boolean&nbsp;isPrimitif(java.lang.String&nbsp;classname)</pre>
<div class="block">renvoie true si et seulement si classname figure parmi les noms de classes
 contenus dans l'attribut typesprimitifs de l'environnement. La classe est alors
 consideree comme etant primitive.</div>
</li>
</ul>
<a name="isTypable(java.lang.Class)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isTypable</h4>
<pre>public static&nbsp;boolean&nbsp;isTypable(java.lang.Class&nbsp;type)</pre>
<div class="block">renvoie true si et seulement si l'utilisateur peut taper manuellement
 la valeur d'une variable du type fourni en argument. Les types pouvant etre fournis
 manuellement sont Integer, int, Double, double et String</div>
</li>
</ul>
<a name="simpleMethodName(java.lang.reflect.Method)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>simpleMethodName</h4>
<pre>public static&nbsp;java.lang.String&nbsp;simpleMethodName(java.lang.reflect.Method&nbsp;meth)</pre>
<div class="block">renvoie le nom simple de la methode constitue de :
 visibilite de la methode, nom simple du type de retour, nom de la methode,
 puis nom simple du type de chaque argument</div>
</li>
</ul>
<a name="simpleConstructorName(java.lang.reflect.Constructor)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>simpleConstructorName</h4>
<pre>public static&nbsp;java.lang.String&nbsp;simpleConstructorName(java.lang.reflect.Constructor&nbsp;constr)</pre>
<div class="block">renvoie le nom simple du constructeur constitue de :
 visibilite du constructeur, nom du type cree,
 puis nom simple du type de chaque argument</div>
</li>
</ul>
<a name="trueVariableName(pilegraph.Variable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>trueVariableName</h4>
<pre>public static&nbsp;java.lang.String&nbsp;trueVariableName(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</pre>
<div class="block">renvoie le nom d'une variable de l'environnement debutant par le nom
 d'une poignee a laquelle elle est liee soit directement, soit indirectement
 en passant par des attributs d'autres variables, comme par exemple poignee1.attributA.attributB</div>
</li>
</ul>
<a name="addAttributesToInstances(pilegraph.Variable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>addAttributesToInstances</h4>
<pre>public&nbsp;void&nbsp;addAttributesToInstances(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</pre>
<div class="block">ajoute dans l'environnement tous les attributs de la variable var qui sont non primitifs 
 et non nulls et qui ne sont pas deja presents dans l'environnement, 
 puis appel recursif de addAttributesToInstances sur tout attribut non primitif et non null,
 peu importe qu'il soit deja present ou non dans l'environnement</div>
</li>
</ul>
<a name="setAttributeNull(java.lang.String, java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setAttributeNull</h4>
<pre>public&nbsp;void&nbsp;setAttributeNull(java.lang.String&nbsp;nomVar,
                    java.lang.String&nbsp;nomAtt)</pre>
<div class="block">mise a null de l'attribut nomAtt de la variable nomVar</div>
</li>
</ul>
<a name="changeAttribute(java.lang.String, pilegraph.Variable, pilegraph.Variable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>changeAttribute</h4>
<pre>public&nbsp;void&nbsp;changeAttribute(java.lang.String&nbsp;attributeName,
                   <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;hasAttribute,
                   <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;newAttribute)</pre>
<div class="block">modifie la valeur de l'attribut attributeName de la variable hasAttribute en lui
 affectant pour valeur la variable newAttribute</div>
</li>
</ul>
<a name="getConstructorArguments(java.lang.reflect.Constructor)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getConstructorArguments</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&gt;&nbsp;getConstructorArguments(java.lang.reflect.Constructor&nbsp;cstr)</pre>
<div class="block">renvoie pour chaque argument d'un constructeur toutes les variables de type
 compatible dans l'environnement stockes dans une liste.
 Comme pour chaque argument une ArrayList<Variable> sera determinee,
 le retour sera une ArrayList<ArrayList<Variable>></div>
</li>
</ul>
<a name="getMethodOrConstructorArguments(java.lang.Class[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getMethodOrConstructorArguments</h4>
<pre>public&nbsp;java.util.ArrayList&lt;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&gt;&nbsp;getMethodOrConstructorArguments(java.lang.Class[]&nbsp;typesArguments)</pre>
<div class="block">renvoie pour chaque argument d'un constructeur ou d'une methode toutes les variables de type
 compatible dans l'environnement stockes dans une liste.
 Comme pour chaque argument une ArrayList<Variable> sera determinee,
 le retour sera une ArrayList<ArrayList<Variable>></div>
</li>
</ul>
<a name="linkedAttributes(pilegraph.Variable, boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>linkedAttributes</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&nbsp;linkedAttributes(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;culprit,
                                             boolean&nbsp;start)</pre>
<div class="block">supprime les liens entre une variable et tous ses attributs et realise ensuite 
 la meme chose recursivement a chacun de ces attributs qui est de type non primitif.
 Renvoie la liste des attributs supprimes</div>
</li>
</ul>
<a name="removeAttributesFromInstances(pilegraph.Variable, boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>removeAttributesFromInstances</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&nbsp;removeAttributesFromInstances(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;culprit,
                                                          boolean&nbsp;start)</pre>
<div class="block">renvoie la liste des attributs d'une variable culprit.
 On ajoute ensuite recursivement a cette liste les attributs de chaque attribut.</div>
</li>
</ul>
<a name="callMethodUpon(java.lang.reflect.Method, pilegraph.Variable, java.lang.Object[])">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>callMethodUpon</h4>
<pre>public&nbsp;java.lang.Object&nbsp;callMethodUpon(java.lang.reflect.Method&nbsp;meth,
                              <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;upon,
                              java.lang.Object[]&nbsp;methargs)</pre>
<div class="block">callMethodUpon appelle la methode meth avec les arguments methargs sur la variable upon.
 Comme la methode peut avoir des effets de bord sur la variable et ses attributs,
 on supprime les liens entre la variable et ses attributs en appelant la methode linkedAttributes .
 Les attributs de la variable seront ensuite rajoutes a l'environnement 
 apres l'appel de la methode meth sur upon en appelant la methode addAttributesToInstances.
 si la methode possede un attribut declare en static, afin de prendre en compte
 la modification potentielle de cet attribut qui se fera sur toutes les instances
 possedant ce meme attribut en static, il faudra supprimer puis rajouter
 les attributs de chaque variable possedant cet attribut static.
 La methode refreshRelatedVariables realise ceci.</div>
</li>
</ul>
<a name="getVariableByName(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getVariableByName</h4>
<pre>public&nbsp;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;getVariableByName(java.lang.String&nbsp;namevar)</pre>
<div class="block">recupere de l'environnement la variable ayant pour nom namevar</div>
</li>
</ul>
<a name="getClasseByName(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getClasseByName</h4>
<pre>public&nbsp;java.lang.Class&nbsp;getClasseByName(java.lang.String&nbsp;classname)</pre>
<div class="block">recupere de l'environnement la classe ayant pour nom classname</div>
</li>
</ul>
<a name="getPoigneeByName(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getPoigneeByName</h4>
<pre>public&nbsp;<a href="../pilegraph/Poignee.html" title="class in pilegraph">Poignee</a>&nbsp;getPoigneeByName(java.lang.String&nbsp;namepgn)</pre>
<div class="block">recupere de l'environnement la poignee ayant pour nom namepgn</div>
</li>
</ul>
<a name="equalsPoigneePoignee(java.lang.String, java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>equalsPoigneePoignee</h4>
<pre>public&nbsp;void&nbsp;equalsPoigneePoignee(java.lang.String&nbsp;namepgnleft,
                        java.lang.String&nbsp;namepgnright)</pre>
<div class="block">affecte la poignee ayant pour nom namepgnleft la valeur pointee 
 par la poignee ayant pour nom namepgnright</div>
</li>
</ul>
<a name="retireVariableMere(java.lang.String, pilegraph.Variable, pilegraph.Variable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>retireVariableMere</h4>
<pre>public&nbsp;void&nbsp;retireVariableMere(java.lang.String&nbsp;nomattribut,
                      <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;varMere,
                      <a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;varFille)</pre>
<div class="block">retire des attributs variablesMeres et attributsPeres de la variable varFille
 respectivement la variable varMere et la chaine nomattribut</div>
</li>
</ul>
<a name="equalsPoigneeVariable(java.lang.String, java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>equalsPoigneeVariable</h4>
<pre>public&nbsp;void&nbsp;equalsPoigneeVariable(java.lang.String&nbsp;namepgn,
                         java.lang.String&nbsp;namevar)</pre>
<div class="block">affecte la poignee ayant pour nom namevar a la variable nommee namevar de l'environnement</div>
</li>
</ul>
<a name="mettrePoigneeNull(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mettrePoigneeNull</h4>
<pre>public&nbsp;void&nbsp;mettrePoigneeNull(java.lang.String&nbsp;namepgn)</pre>
<div class="block">affecte la poignee nommee namepgn a la valeur null</div>
</li>
</ul>
<a name="ramasseMiettes()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>ramasseMiettes</h4>
<pre>public&nbsp;void&nbsp;ramasseMiettes()</pre>
<div class="block">le ramasse-miette supprime de l'environnement les variables qui sont completement inaccessibles,
 ie aucune poignee ne permet d'y acceder, que ce soit directement ou indirectement
 par le biais des attributs des variables vers lesquelles les poignees pointent.</div>
</li>
</ul>
<a name="estAccessible(pilegraph.Variable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>estAccessible</h4>
<pre>public static&nbsp;boolean&nbsp;estAccessible(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</pre>
<div class="block">renvoie true si et seulement si une variable est accessible,
 que ce soit directement a travers une poignee quand cette poignee pointe vers la variable
 ou a travers les attributs des variables vers lesquelles les poignees pointent</div>
</li>
</ul>
<a name="variableContenantAttribut(java.lang.String, java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>variableContenantAttribut</h4>
<pre>public&nbsp;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;variableContenantAttribut(java.lang.String&nbsp;nomVarMere,
                                 java.lang.String&nbsp;nomAttPere)</pre>
<div class="block">renvoie la variable de l'environnement contenant 
 l'attribut nomAttPere de la variable NomVarMere</div>
</li>
</ul>
<a name="varsContainField(java.lang.String, java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>varsContainField</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&nbsp;varsContainField(java.lang.String&nbsp;nomVarMere,
                                             java.lang.String&nbsp;nomAttPere)</pre>
<div class="block">renvoie toutes les variables ayant pour variable mere la variable nommee nomVarMere
 et pour attribut pere correspondant l'attribut nomAttPere.
 Fonction de test permettant de verifier qu'a tout moment, tout attribut non null d'une
 variable quelconque pointe sur une unique variable.</div>
</li>
</ul>
<a name="variablesContenantAttributs(pilegraph.Variable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>variablesContenantAttributs</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&nbsp;variablesContenantAttributs(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</pre>
<div class="block">renvoie toutes les variables filles de la variable var,
 ie toutes les variables vers lesquelles les attributs non nulls de var pointent</div>
</li>
</ul>
<a name="hasStaticField(pilegraph.Variable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>hasStaticField</h4>
<pre>public&nbsp;boolean&nbsp;hasStaticField(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</pre>
<div class="block">verifie recursivement si une variable ainsi que toutes les variables ayant pour valeurs
 les attributs de cette variable possedent au moins un attribut declare en statique</div>
</li>
</ul>
<a name="refreshRelatedVariables(pilegraph.Variable)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>refreshRelatedVariables</h4>
<pre>public&nbsp;void&nbsp;refreshRelatedVariables(<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&nbsp;var)</pre>
<div class="block">soit TypeA le type de la variable var. refreshRelatedVariables supprime les liens
 entre les variables ayant pour type TypeA, tout supertype de TypeA ou sous-type de TypeA.
 Les attributs de toutes ces variables sont ensuite rajoutes a l'environnement
 en appelant la fonction addAttributesToInstances sur chacune de ces variables.</div>
</li>
</ul>
<a name="getAllFields(java.lang.Class)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getAllFields</h4>
<pre>public static&nbsp;java.lang.reflect.Field[]&nbsp;getAllFields(java.lang.Class&nbsp;type)</pre>
<div class="block">renvoie toutes les variables declarees dans la classe type et toutes ses superclasses</div>
</li>
</ul>
<a name="cloneInstances()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cloneInstances</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../pilegraph/Variable.html" title="class in pilegraph">Variable</a>&gt;&nbsp;cloneInstances()</pre>
<div class="block">renvoie une copie de toutes les variables de l'environnement.
 Les copies des instances ne seront pas affectees par les modifications 
 effectuees sur les variables de l'environnement originel</div>
</li>
</ul>
<a name="clonePile()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clonePile</h4>
<pre>public&nbsp;java.util.ArrayList&lt;<a href="../pilegraph/Poignee.html" title="class in pilegraph">Poignee</a>&gt;&nbsp;clonePile()</pre>
<div class="block">renvoie une copie de toutes les poignees de l'environnement.
 Les copies des poignees ne seront pas affectees par les modifications 
 effectuees sur les poignees de l'environnement originel</div>
</li>
</ul>
<a name="main(java.lang.String[])">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>main</h4>
<pre>public static&nbsp;void&nbsp;main(java.lang.String[]&nbsp;args)</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Environnement.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../pilegraph/DrawEnvironnementBis.html" title="class in pilegraph"><span class="strong">Prev Class</span></a></li>
<li><a href="../pilegraph/GUI.html" title="class in pilegraph"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?pilegraph/Environnement.html" target="_top">Frames</a></li>
<li><a href="Environnement.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
